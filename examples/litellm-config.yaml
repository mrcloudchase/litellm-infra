# LiteLLM Configuration Example
# This file shows how to configure LiteLLM with various model providers
# You can mount this as a config file in your ECS container or use environment variables

model_list:
  # OpenAI Models
  - model_name: gpt-4o
    litellm_params:
      model: openai/gpt-4o
      api_key: os.environ/OPENAI_API_KEY
      
  - model_name: gpt-4o-mini
    litellm_params:
      model: openai/gpt-4o-mini
      api_key: os.environ/OPENAI_API_KEY

  - model_name: gpt-3.5-turbo
    litellm_params:
      model: openai/gpt-3.5-turbo
      api_key: os.environ/OPENAI_API_KEY

  # Anthropic Models
  - model_name: claude-3-5-sonnet
    litellm_params:
      model: anthropic/claude-3-5-sonnet-20241022
      api_key: os.environ/ANTHROPIC_API_KEY

  - model_name: claude-3-haiku
    litellm_params:
      model: anthropic/claude-3-haiku-20240307
      api_key: os.environ/ANTHROPIC_API_KEY

  # Azure OpenAI Models
  - model_name: azure-gpt-4o
    litellm_params:
      model: azure/gpt-4o
      api_base: os.environ/AZURE_API_BASE
      api_key: os.environ/AZURE_API_KEY
      api_version: "2024-02-01"

  # AWS Bedrock Models
  - model_name: bedrock-claude-3-sonnet
    litellm_params:
      model: bedrock/anthropic.claude-3-sonnet-20240229-v1:0
      aws_region_name: us-west-2

  # Google Models
  - model_name: gemini-pro
    litellm_params:
      model: gemini/gemini-1.5-pro
      api_key: os.environ/GOOGLE_API_KEY

# General Settings
general_settings:
  # Master key for authentication
  master_key: os.environ/LITELLM_MASTER_KEY
  
  # Database connection
  database_url: os.environ/DATABASE_URL
  
  # Logging
  set_verbose: false
  json_logs: true
  
  # Rate limiting
  max_budget: 1000
  budget_duration: 30d
  
  # Request settings
  request_timeout: 600
  
  # Health check settings
  health_check: true
  
  # CORS settings
  cors_origins: ["*"]
  
  # Fallback settings
  fallbacks:
    - ["gpt-4o", "gpt-4o-mini"]
    - ["claude-3-5-sonnet", "claude-3-haiku"]

# Router settings for load balancing
router_settings:
  routing_strategy: "usage-based-routing-v2"
  redis_host: os.environ/REDIS_HOST # Optional: for caching
  redis_port: 6379
  redis_password: os.environ/REDIS_PASSWORD

# Caching (optional)
cache:
  type: "redis"
  host: os.environ/REDIS_HOST
  port: 6379
  password: os.environ/REDIS_PASSWORD

# Alerting (optional)
alerting:
  - service: "slack"
    webhook_url: os.environ/SLACK_WEBHOOK_URL
    
# Guardrails (optional)
guardrails:
  prompt_injection:
    callbacks: ["presidio"]
    
# Success/Failure callbacks
success_callback: ["langfuse", "supabase"]
failure_callback: ["langfuse"]

# Langfuse integration (optional)
langfuse:
  public_key: os.environ/LANGFUSE_PUBLIC_KEY
  secret_key: os.environ/LANGFUSE_SECRET_KEY
  host: https://cloud.langfuse.com
