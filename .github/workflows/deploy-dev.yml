name: Deploy Dev Environment

on:
  push:
    branches: [main]
    paths:
      - 'modules/**'
      - 'main.tf'
      - 'variables.tf'
      - 'outputs.tf'
      - 'environments/dev/**'
  workflow_dispatch:  # Allow manual triggering
  repository_dispatch:  # Triggered by litellm-app when new image is built
    types: [deploy_new_image]

env:
  AWS_REGION: us-east-1
  TF_VAR_aws_region: us-east-1

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Create Backend Configuration
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.TF_STATE_BUCKET }}"
              key            = "litellm-infra/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
            }
          }
          EOF

      - name: Determine Container Image
        run: |
          # Use image from repository dispatch if available, otherwise use secret
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            CONTAINER_IMAGE="${{ github.event.client_payload.image_uri }}"
            echo "Using new image from litellm-app: $CONTAINER_IMAGE"
            echo "Source commit: ${{ github.event.client_payload.source_commit }}"
          else
            CONTAINER_IMAGE="${{ secrets.CUSTOM_CONTAINER_IMAGE }}"
            echo "Using configured image: $CONTAINER_IMAGE"
          fi
          echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV

      - name: Create Dev Configuration
        run: |
          # Copy the template and replace placeholders with CI/CD values
          cp environments/dev/terraform.tfvars.example environments/dev/terraform.tfvars
          
          # Replace container image placeholder with determined image
          sed -i 's|container_image = ".*"|container_image = "${{ env.CONTAINER_IMAGE }}"|' environments/dev/terraform.tfvars
          
          # Replace OpenAI API key placeholder with GitHub secret
          sed -i 's|PLACEHOLDER_REPLACED_BY_GITHUB_ACTIONS|${{ secrets.OPENAI_API_KEY }}|' environments/dev/terraform.tfvars
          
          echo "Using configuration from terraform.tfvars.example with CI/CD overrides:"
          echo "- Container Image: ${{ env.CONTAINER_IMAGE }}"
          echo "- OpenAI API Key: [REDACTED]"

      - name: Initialize Terraform
        run: terraform init

      - name: Select CI Workspace
        run: |
          terraform workspace select dev-ci || terraform workspace new dev-ci

      - name: Validate Configuration
        run: terraform validate

      - name: Plan Infrastructure Changes
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out=tfplan
        
      - name: Apply Infrastructure Changes
        run: terraform apply tfplan

      - name: Get Deployment Information
        run: |
          echo "## Dev Environment Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Image**: ${{ env.CONTAINER_IMAGE }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "- **Source Commit**: ${{ github.event.client_payload.source_commit }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Source Repository**: ${{ github.event.client_payload.source_repo }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB URL**: $(terraform output -raw alb_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster**: $(terraform output -raw ecs_cluster_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Endpoint**: $(terraform output -raw database_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Secret Retrieval Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Get LiteLLM master key:" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output secret_retrieval_commands | jq -r '.master_key')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Get database URL:" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output secret_retrieval_commands | jq -r '.db_url')" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

