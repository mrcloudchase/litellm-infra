name: Deploy Dev Environment

on:
  push:
    branches: [main]
    paths:
      - 'modules/**'
      - 'main.tf'
      - 'variables.tf'
      - 'outputs.tf'
      - 'environments/dev/**'
  workflow_dispatch:  # Allow manual triggering
  repository_dispatch:  # Triggered by litellm-app when new image is built
    types: [deploy_new_image]

env:
  AWS_REGION: us-east-1
  TF_VAR_aws_region: us-east-1

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Create Backend Configuration
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.TF_STATE_BUCKET }}"
              key            = "litellm-infra/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
            }
          }
          EOF

      - name: Determine Container Image
        run: |
          # Use image from repository dispatch if available, otherwise use secret
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            CONTAINER_IMAGE="${{ github.event.client_payload.image_uri }}"
            echo "Using new image from litellm-app: $CONTAINER_IMAGE"
            echo "Source commit: ${{ github.event.client_payload.source_commit }}"
          else
            CONTAINER_IMAGE="${{ secrets.CUSTOM_CONTAINER_IMAGE }}"
            echo "Using configured image: $CONTAINER_IMAGE"
          fi
          echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV

      - name: Create Dev Configuration
        run: |
          cat > environments/dev/terraform.tfvars << EOF
          # Auto-generated configuration for CI/CD deployment
          
          # General Settings
          aws_region   = "${{ env.AWS_REGION }}"
          name_prefix  = "litellm-dev-ci"
          
          # Default tags for all resources
          default_tags = {
            Environment = "dev"
            Project     = "litellm"
            ManagedBy   = "terraform-ci"
            Owner       = "github-actions"
            CostCenter  = "engineering"
          }
          
          # VPC Configuration (cost-optimized for dev)
          vpc_cidr                 = "10.0.0.0/16"
          public_subnet_cidrs      = ["10.0.1.0/24", "10.0.2.0/24"]
          private_subnet_cidrs     = ["10.0.10.0/24", "10.0.20.0/24"]
          database_subnet_cidrs    = ["10.0.100.0/24", "10.0.200.0/24"]
          enable_nat_gateway       = true
          single_nat_gateway       = true
          
          # Security Configuration
          allowed_cidr_blocks = ["68.76.147.104/32"]  # Restrict to your IP only
          
          # LiteLLM Configuration
          litellm_port    = 4000
          container_image = "${{ env.CONTAINER_IMAGE }}"
          
          # Database Configuration (cost-optimized)
          database_name     = "litellm"
          database_username = "litellm"
          db_engine_version          = "15.8"
          db_instance_class          = "db.t3.micro"
          db_allocated_storage       = 20
          db_max_allocated_storage   = 100
          db_storage_encrypted       = true
          db_backup_retention_period = 7
          db_multi_az               = false
          db_deletion_protection    = false
          db_skip_final_snapshot    = true
          
          # ECS Configuration (multi-container: LiteLLM + Ollama)
          ecs_cpu                   = 2048  # Increased for Ollama model serving
          ecs_memory               = 6144   # Increased for llama3.2:3b model (~3GB + overhead)
          ecs_desired_count        = 1
          ecs_min_capacity         = 1
          ecs_max_capacity         = 3
          ecs_enable_autoscaling   = false
          ecs_enable_execute_command = true
          
          # ALB Configuration
          health_check_path                = "/health"
          health_check_interval           = 30
          health_check_timeout            = 5
          health_check_healthy_threshold  = 2
          health_check_unhealthy_threshold = 3
          alb_enable_deletion_protection  = false
          alb_idle_timeout               = 60
          
          # Environment Variables
          environment_variables = {
            LITELLM_LOG_LEVEL = "DEBUG"
            LITELLM_DROP_PARAMS = "true"
          }
          
          # API Keys for LiteLLM Models
          additional_ssm_parameters = {
            "openai-api-key" = {
              value       = "${{ secrets.OPENAI_API_KEY }}"
              type        = "SecureString"
              description = "OpenAI API Key for LiteLLM Dev"
            }
          }
          EOF

      - name: Initialize Terraform
        run: terraform init

      - name: Select CI Workspace
        run: |
          terraform workspace select dev-ci || terraform workspace new dev-ci

      - name: Validate Configuration
        run: terraform validate

      - name: Plan Infrastructure Changes
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out=tfplan
        
      - name: Apply Infrastructure Changes
        run: terraform apply tfplan

      - name: Get Deployment Information
        run: |
          echo "## Dev Environment Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Image**: ${{ env.CONTAINER_IMAGE }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "- **Source Commit**: ${{ github.event.client_payload.source_commit }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Source Repository**: ${{ github.event.client_payload.source_repo }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB URL**: $(terraform output -raw alb_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster**: $(terraform output -raw ecs_cluster_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Endpoint**: $(terraform output -raw database_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Secret Retrieval Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Get LiteLLM master key:" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output secret_retrieval_commands | jq -r '.master_key')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Get database URL:" >> $GITHUB_STEP_SUMMARY
          echo "$(terraform output secret_retrieval_commands | jq -r '.db_url')" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Test Health Endpoint
        run: |
          ALB_URL=$(terraform output -raw alb_url)
          echo "Testing health endpoint..."
          
          # Wait for service to be healthy (up to 5 minutes)
          for i in {1..30}; do
            if curl -f "$ALB_URL/health" --connect-timeout 10 --max-time 30; then
              echo "Health check passed!"
              break
            else
              echo "Waiting for service to be healthy... (attempt $i/30)"
              sleep 10
            fi
          done
