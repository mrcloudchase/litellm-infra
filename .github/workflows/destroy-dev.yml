name: Destroy Dev Environment

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destruction of the dev-ci environment'
        required: true
        default: ''

env:
  AWS_REGION: us-east-1
  TF_VAR_aws_region: us-east-1

jobs:
  destroy-dev:
    name: Destroy Dev CI Environment
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Validate Destroy Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "Destruction cancelled. You must type 'DESTROY' to confirm."
            exit 1
          fi
          echo "Destruction confirmed. Proceeding to destroy dev-ci environment..."

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Create Backend Configuration
        run: |
          cat > backend.tf << 'EOF'
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.TF_STATE_BUCKET }}"
              key            = "litellm-infra/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
            }
          }
          EOF

      - name: Initialize Terraform
        run: terraform init

      - name: Select CI Workspace
        run: |
          terraform workspace select dev-ci || {
            echo "dev-ci workspace not found. Nothing to destroy."
            exit 0
          }

      - name: Determine Container Image
        run: |
          # Use image from repository dispatch if available, otherwise use secret
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            CONTAINER_IMAGE="${{ github.event.client_payload.image_uri }}"
            echo "Using new image from litellm-app: $CONTAINER_IMAGE"
            echo "Source commit: ${{ github.event.client_payload.source_commit }}"
          else
            CONTAINER_IMAGE="${{ secrets.CUSTOM_CONTAINER_IMAGE }}"
            echo "Using configured image: $CONTAINER_IMAGE"
          fi
          echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV

      - name: Create Terraform Variables
        run: |
          echo "Creating terraform.tfvars for destroy operations..."
          cp environments/dev/terraform.tfvars.example environments/dev/terraform.tfvars
          
          # Replace container image placeholder with determined image (same as deploy)
          sed -i 's|container_image = ".*"|container_image = "${{ env.CONTAINER_IMAGE }}"|' environments/dev/terraform.tfvars
          
          # Replace OpenAI API key placeholder with actual secret (same as deploy)
          sed -i 's|PLACEHOLDER_REPLACED_BY_GITHUB_ACTIONS|${{ secrets.OPENAI_API_KEY }}|' environments/dev/terraform.tfvars
          
          echo "Using configuration identical to deploy workflow:"
          echo "- Container Image: ${{ env.CONTAINER_IMAGE }}"
          echo "- OpenAI API Key: [REDACTED]"

      - name: Show Current Resources
        run: |
          echo "Current resources in dev-ci workspace:"
          terraform state list || echo "No resources found in state."

      - name: Plan Destruction
        timeout-minutes: 5
        run: |
          echo "Planning destruction (skipping refresh to avoid AWS API delays)..."
          terraform plan -destroy -refresh=false -var-file="environments/dev/terraform.tfvars" -out=destroyplan || {
            echo "Plan failed, trying with lock disabled..."
            terraform plan -destroy -refresh=false -lock=false -var-file="environments/dev/terraform.tfvars" -out=destroyplan || {
              echo "Standard plan failed, attempting targeted destruction..."
              terraform plan -destroy -refresh=false -lock=false \
                -var-file="environments/dev/terraform.tfvars" \
                -target=module.alb \
                -target=module.ecs \
                -target=module.rds \
                -target=module.vpc \
                -out=destroyplan || {
                echo "All plan attempts failed. Proceeding with force destroy..."
                terraform destroy -refresh=false -lock=false -var-file="environments/dev/terraform.tfvars" -auto-approve || echo "Force destroy completed with warnings"
                exit 0
              }
            }
          }
          echo "Resources to be destroyed:"
          terraform show destroyplan

      - name: Destroy Infrastructure
        run: |
          echo "Destroying dev-ci environment..."
          if [ -f destroyplan ]; then
            terraform apply -auto-approve destroyplan
          else
            echo "No destroy plan found - destruction may have been completed in planning phase"
          fi
          echo "Infrastructure destroyed successfully!"

      - name: Clean Up Workspace
        run: |
          echo "Cleaning up workspace..."
          # Check if workspace is empty
          if [ "$(terraform state list | wc -l)" -eq 0 ]; then
            echo "Workspace is empty, deleting it..."
            terraform workspace select default
            terraform workspace delete dev-ci
            echo "dev-ci workspace deleted"
          else
            echo "WARNING: Workspace still contains resources, keeping it"
          fi

      - name: Summary
        run: |
          echo "Destruction Summary:"
          echo "Environment: dev-ci"
          echo "Workspace: Cleaned up"
          echo "AWS Resources: Destroyed"
          echo "Cost Impact: Resources stopped billing"
          echo ""
          echo "INFO: To redeploy, run the 'Deploy Dev Environment' workflow"
